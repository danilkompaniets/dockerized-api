version: "3.8"

services:
  nginx:
    image: nginx:stable-alpine
    ports:
      - "3000:80"
    volumes:
      - type: bind
        source: ./nginx/default.conf
        target: /etc/nginx/conf.d/default.conf
        read_only: true
    depends_on:
      - node-app
    networks:
      - frontend
      - backend
  node-app:
    build:
      context: .
      dockerfile: ./Dockerfile
      target: development
    environment:
      - PORT=3000
      - MONGO_USER=root
      - MONGO_PASSWORD=root
      - SESSION_SECRET=secret

    volumes:
      - type: bind
        source: ./
        target: /usr/src/app
        read_only: true

    depends_on:
      mongo:
        condition: service_healthy
      redis:
        condition: service_healthy

    networks:
      - frontend
      - backend

  mongo:
    image: mongo
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: root
    volumes:
      - type: volume
        source: mongo_data_dev
        target: /data/db
    networks:
      - backend
    healthcheck:
      test: ["CMD","mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 5s
      timeout: 5s
      retries: 3
      start_period: 5s


  redis:
    image: redis:7
    restart: unless-stopped
    command: redis-server --appendonly yes
    volumes:
      - type: volume
        source: redis_data_dev
        target: /data
    networks:
      - backend
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3

volumes:
  mongo_data_dev:
  redis_data_dev:

networks:
  frontend:
  backend: