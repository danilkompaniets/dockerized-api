version: "3.8"

services:
  nginx:
    image: nginx:stable-alpine
    ports:
      - "80:80"
    volumes:
      - type: bind
        source: ./nginx/default.conf
        target: /etc/nginx/conf.d/default.conf
        read_only: true
    networks:
      - frontend
      - backend
  node-app:
    build:
      context: .
      dockerfile: ./Dockerfile
      target: development
#    ports:
#      - "3000:3000"
    environment:
      - PORT=3000
      - MONGO_USER=root
      - MONGO_PASSWORD=root
      - SESSION_SECRET=secret
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    restart: unless-stopped
    depends_on:
      mongo:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - backend
      - frontend

  mongo:
    image: mongo
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: root
    volumes:
      - type: volume
        source: mongo_data_prod
        target: /data/db
    networks:
      - backend
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7
    restart: unless-stopped
    volumes:
      - type: volume
        source: redis_data_prod
        target: /data
    networks:
      - backend
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5

volumes:
  mongo_data_prod:
  redis_data_prod:

networks:
  frontend:
  backend:
